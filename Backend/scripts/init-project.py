#!/usr/bin/env python3
"""
Real Estate API Project Initialization Script
This script sets up the complete project with all necessary components.
"""

import asyncio
import os
import secrets
import string
import subprocess
import sys
from pathlib import Path

# Add app to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.core.config import get_settings
from app.core.database import create_db_connection, create_tables
from app.core.redis import create_redis_connection, initialize_redis_globals


def generate_secret_key(length: int = 50) -> str:
    """Generate a secure random secret key."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def create_env_file():
    """Create .env file with proper configuration."""
    env_content = f"""# Real Estate API Configuration
# Generated by init-project.py

# Application Settings
ENVIRONMENT=development
DEBUG=True
APP_NAME="Real Estate API"
VERSION=0.1.0

# Security Keys (CHANGE THESE IN PRODUCTION!)
SECRET_KEY={generate_secret_key()}
JWT_SECRET_KEY={generate_secret_key()}

# Database Configuration
DATABASE_URL=postgresql://postgres:password@localhost:5432/realestate
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=

# JWT Settings
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=15
REFRESH_TOKEN_EXPIRE_DAYS=7

# SMS Service (Configure with your provider)
SMS_API_KEY=your-sms-api-key-here
SMS_SENDER=RealEstateAPI
SMS_PROVIDER=sms_ru

# File Upload Settings
MEDIA_URL=/media/
MEDIA_ROOT=./media/
MAX_UPLOAD_SIZE=52428800
ALLOWED_IMAGE_EXTENSIONS=jpg,jpeg,png,webp
ALLOWED_DOCUMENT_EXTENSIONS=pdf,doc,docx

# Rate Limiting
RATE_LIMIT_AUTHENTICATED=100/minute
RATE_LIMIT_ANONYMOUS=20/minute

# CORS Settings
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000
ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS,PATCH
ALLOWED_HEADERS=*

# Optional: Email Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_TLS=True

# Optional: External APIs
MAPS_API_KEY=your-maps-api-key
WEATHER_API_KEY=your-weather-api-key

# Performance Settings
CACHE_TTL=300
QUERY_CACHE_TTL=60

# Monitoring (Optional)
SENTRY_DSN=
LOG_LEVEL=INFO
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Created .env file with secure configuration")


def create_directories():
    """Create necessary directories."""
    directories = [
        'media',
        'media/images',
        'media/documents',
        'media/avatars',
        'logs',
        'tests',
        'tests/unit',
        'tests/integration',
        'tests/fixtures',
        'scripts',
        'docs',
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("✅ Created necessary directories")


def check_services():
    """Check if required services are running."""
    services_status = {}
    
    # Check PostgreSQL
    try:
        result = subprocess.run(
            ['pg_isready', '-h', 'localhost', '-p', '5432'], 
            capture_output=True, 
            text=True
        )
        services_status['postgresql'] = result.returncode == 0
    except FileNotFoundError:
        services_status['postgresql'] = False
    
    # Check Redis
    try:
        result = subprocess.run(
            ['redis-cli', 'ping'], 
            capture_output=True, 
            text=True
        )
        services_status['redis'] = result.returncode == 0 and 'PONG' in result.stdout
    except FileNotFoundError:
        services_status['redis'] = False
    
    return services_status


async def initialize_database():
    """Initialize database connection and create tables."""
    try:
        await create_db_connection()
        await create_tables()
        print("✅ Database initialized successfully")
        return True
    except Exception as e:
        print(f"❌ Database initialization failed: {e}")
        return False


async def initialize_redis():
    """Initialize Redis connection."""
    try:
        await create_redis_connection()
        initialize_redis_globals()
        print("✅ Redis initialized successfully")
        return True
    except Exception as e:
        print(f"❌ Redis initialization failed: {e}")
        return False


def create_alembic_config():
    """Create Alembic configuration."""
    alembic_env = '''import asyncio
from logging.config import fileConfig
from sqlalchemy import pool
from sqlalchemy.engine import Connection
from sqlalchemy.ext.asyncio import async_engine_from_config
from alembic import context

from app.core.config import get_settings
from app.core.database import Base
from app.models import *  # Import all models

# this is the Alembic Config object
config = context.config

# Interpret the config file for Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Add your model's MetaData object here
target_metadata = Base.metadata

def get_url():
    settings = get_settings()
    return settings.get_database_url()

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

def do_run_migrations(connection: Connection) -> None:
    context.configure(connection=connection, target_metadata=target_metadata)

    with context.begin_transaction():
        context.run_migrations()

async def run_async_migrations() -> None:
    """Run migrations in 'online' mode."""
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_url()
    
    connectable = async_engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()

def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    asyncio.run(run_async_migrations())

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
'''
    
    # Create alembic directory if it doesn't exist
    Path('alembic').mkdir(exist_ok=True)
    
    # Write env.py
    with open('alembic/env.py', 'w') as f:
        f.write(alembic_env)
    
    print("✅ Created Alembic configuration")


def print_setup_instructions():
    """Print setup instructions for the user."""
    print("\n" + "="*60)
    print("🏠 REAL ESTATE API - SETUP COMPLETE")
    print("="*60)
    
    print("\n📋 NEXT STEPS:")
    print("\n1. 🔧 CONFIGURE YOUR ENVIRONMENT:")
    print("   - Edit .env file with your actual configuration")
    print("   - Set up SMS provider API key")
    print("   - Configure database connection")
    print("   - Set up Redis connection")
    
    print("\n2. 🗄️ DATABASE SETUP:")
    print("   - Install PostgreSQL if not installed:")
    print("     sudo pacman -S postgresql  # Arch/EndeavourOS")
    print("   - Initialize PostgreSQL:")
    print("     sudo -u postgres initdb -D /var/lib/postgres/data")
    print("   - Start PostgreSQL:")
    print("     sudo systemctl start postgresql")
    print("     sudo systemctl enable postgresql")
    print("   - Create database:")
    print("     sudo -u postgres createdb realestate")
    
    print("\n3. 🔧 REDIS SETUP:")
    print("   - Install Redis:")
    print("     sudo pacman -S redis")
    print("   - Start Redis:")
    print("     sudo systemctl start redis")
    print("     sudo systemctl enable redis")
    
    print("\n4. 🚀 RUN THE APPLICATION:")
    print("   - Start development server:")
    print("     poetry run uvicorn app.main:app --reload")
    print("   - Or use the setup script:")
    print("     ./scripts/setup-dev.sh")
    
    print("\n5. 📚 ACCESS DOCUMENTATION:")
    print("   - Swagger UI: http://localhost:8000/docs")
    print("   - ReDoc: http://localhost:8000/redoc")
    print("   - API Health: http://localhost:8000/health")
    
    print("\n6. 🧪 DEVELOPMENT TOOLS:")
    print("   - Run tests: poetry run pytest")
    print("   - Format code: poetry run black app/")
    print("   - Type check: poetry run mypy app/")
    print("   - Create migration: poetry run alembic revision --autogenerate -m 'description'")
    
    print("\n🔐 SECURITY REMINDERS:")
    print("   - Change SECRET_KEY and JWT_SECRET_KEY in production")
    print("   - Set up proper SMS provider credentials")
    print("   - Configure CORS for your frontend domain")
    print("   - Use environment variables for sensitive data")
    
    print("\n📞 CONTACT:")
    print("   - GitHub: https://github.com/yourproject/realestate-api")
    print("   - Docs: Check README.md for detailed information")
    
    print("\n" + "="*60)


async def main():
    """Main initialization function."""
    print("🚀 Initializing Real Estate API Project...")
    print("="*50)
    
    # Create directories
    create_directories()
    
    # Create environment file
    create_env_file()
    
    # Create Alembic config
    create_alembic_config()
    
    # Check services
    print("\n🔍 Checking required services...")
    services = check_services()
    
    for service, status in services.items():
        status_icon = "✅" if status else "❌"
        print(f"   {status_icon} {service.capitalize()}: {'Running' if status else 'Not running'}")
    
    # Try to initialize services if they're running
    if services.get('postgresql', False):
        await initialize_database()
    else:
        print("⚠️  PostgreSQL not running - skipping database initialization")
    
    if services.get('redis', False):
        await initialize_redis()
    else:
        print("⚠️  Redis not running - skipping Redis initialization")
    
    # Print instructions
    print_setup_instructions()


if __name__ == "__main__":
    asyncio.run(main())

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "realestate-api"
version = "1.0.0"
description = "Professional Real Estate Platform Backend API"
authors = ["Fukuyama Keiske <verve@is-god.ru>"]
readme = "README.md"
packages = [{include = "app"}]
license = "MIT"
homepage = "https://github.com/yourusername/realestate-api"
repository = "https://github.com/yourusername/realestate-api"
keywords = ["fastapi", "real-estate", "api", "backend", "property-management"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
asyncpg = "^0.30.0"
redis = "^5.0.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-slugify = "^8.0.1"
phonenumbers = "^8.13.25"
pillow = "^10.1.0"
httpx = "^0.25.2"
structlog = "^23.2.0"
slowapi = "^0.1.9"
celery = "^5.3.4"
flower = "^2.0.1"
prometheus-client = "^0.19.0"
python-dateutil = "^2.8.2"
pytz = "^2023.3"
aiofiles = "^23.2.0"
python-magic = "^0.4.27"
geoalchemy2 = "^0.14.2"
# MongoDB support
motor = "^3.3.2"
beanie = "^1.23.6"
# ClickHouse support
clickhouse-driver = "^0.2.6"
# Kafka support
aiokafka = "0.10.0"
kafka-python = "^2.0.2"
# Monitoring and observability
prometheus-fastapi-instrumentator = "^6.1.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
elasticsearch = "^8.11.1"
sentry-sdk = {extras = ["fastapi"], version = "^1.38.0"}
# Additional utilities
geopy = "^2.4.0"
sentence-transformers = "^2.2.2"
numpy = "^1.25.2"
pandas = "^2.3.0"
xgboost = "^3.0.2"
lightgbm = "^4.6.0"
scikit-learn = "^1.7.0"
torch = "^2.7.1"
torchvision = "^0.22.1"
optuna = "^4.4.0"
mlflow = "^3.1.1"
joblib = "^1.5.1"
matplotlib = "^3.10.3"
seaborn = "^0.13.2"
catboost = "^1.2.8"
prophet = "^1.1.7"
statsmodels = "^0.14.4"
implicit = "^0.7.2"
cloudpickle = "^3.1.1"
tqdm = "^4.67.1"

[tool.poetry.scripts]
dev = "scripts:dev"
start = "scripts:start"
test = "scripts:test"
lint = "scripts:lint"
format = "scripts:format"
migrate = "scripts:migrate"
seed = "scripts:seed"
clean = "scripts:clean"
build = "scripts:build"
check-all = "scripts:check_all"
requirements = "scripts:requirements"
init-db = "scripts:init_db"
show-logs = "scripts:show_logs"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
factory-boy = "^3.3.0"
faker = "^20.1.0"
httpx = "^0.25.2"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["**/migrations/*.py"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "slowapi.*",
    "factory.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
